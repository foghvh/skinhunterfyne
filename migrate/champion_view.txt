// skinhunter/ui/champion_view.go
package ui

import (
	"fmt"
	"log"
	"strings"

	"skinhunter/data"

	"fyne.io/fyne/v2"
	"fyne.io/fyne/v2/container"
	"fyne.io/fyne/v2/widget"
	// Remove unused imports if any
)

// NewChampionView creates the view displaying champion details and their skins.
func NewChampionView(
	champion data.ChampionSummary,
	onBack func(),
	onSkinSelect func(skin data.Skin, allChromas []data.Chroma),
) fyne.CanvasObject {

	log.Printf("Creating champion view for: %s (ID: %d)", champion.Name, champion.ID)
	loading := widget.NewProgressBarInfinite()
	contentArea := container.NewMax(container.NewCenter(loading))

	go func() {
		details, err := data.FetchChampionDetails(champion.ID)
		var viewContent fyne.CanvasObject

		if err != nil {
			log.Printf("Error fetching details for %s (ID: %d): %v", champion.Name, champion.ID, err)
			errorLabel := widget.NewLabel(fmt.Sprintf("Error loading details for %s", champion.Name))
			errorLabel.Wrapping = fyne.TextWrapWord
			viewContent = container.NewCenter(errorLabel)
		} else {
			log.Printf("Details fetched successfully for %s", details.Name)

			// Left Side: Champion Info (Icon, Name, Title, Bio)
			imgSize := float32(80)
			// *** FIX: NewAsyncImage now returns only the widget ***
			imgWidget := NewAsyncImage(imgSize, imgSize)
			imageUrl := data.Asset(details.SquarePortraitPath)

			// *** FIX: Call SetImageURL with correct arguments ***
			SetImageURL(imgWidget, imageUrl) // Pass widget, url

			champNameLabel := widget.NewLabelWithStyle(details.Name, fyne.TextAlignLeading, fyne.TextStyle{Bold: true})
			champTitleText := ""
			if details.Title != "" {
				champTitleText = strings.Title(strings.ToLower(details.Title))
			}
			champTitleLabel := widget.NewLabel(champTitleText)
			champTitleLabel.Wrapping = fyne.TextWrapWord

			bioLabel := widget.NewLabel(details.ShortBio)
			bioLabel.Wrapping = fyne.TextWrapWord
			bioScroll := container.NewScroll(bioLabel)
			bioScroll.SetMinSize(fyne.NewSize(300, 100))

			champInfoBlock := container.NewVBox(
				// *** FIX: Use imgWidget directly in the layout ***
				container.NewHBox(imgWidget, container.NewVBox(champNameLabel, champTitleLabel)),
				widget.NewSeparator(),
				bioScroll,
			)

			// Right Side: Skins Grid
			skinsTitleLabel := widget.NewLabelWithStyle(fmt.Sprintf("%s Skins", details.Name), fyne.TextAlignCenter, fyne.TextStyle{Bold: true, Italic: false})
			skinsGrid := NewSkinsGrid(details.Skins, func(skin data.Skin) {
				log.Printf("Skin selected in ChampionView: %s (ID: %d)", skin.Name, skin.ID)
				var allChromasForChamp []data.Chroma
				for _, s := range details.Skins {
					for _, ch := range s.Chromas {
						if ch.OriginSkinID == 0 {
							ch.OriginSkinID = s.ID
						}
						allChromasForChamp = append(allChromasForChamp, ch)
					}
				}
				log.Printf("Passing %d total chromas to dialog for champ %s", len(allChromasForChamp), details.Name)
				onSkinSelect(skin, allChromasForChamp)
			})

			skinsArea := container.NewBorder(container.NewPadded(skinsTitleLabel), nil, nil, nil, skinsGrid)

			split := container.NewHSplit(
				container.NewPadded(champInfoBlock),
				container.NewPadded(skinsArea),
			)
			split.Offset = 0.3

			viewContent = split
			log.Printf("Champion view UI built for %s", details.Name)
		}

		// Update the Main Content Area (This part should be safe)
		contentArea.Objects = []fyne.CanvasObject{viewContent}
		contentArea.Refresh()
		log.Printf("Champion view updated for %s", champion.Name)

	}() // End of goroutine

	return contentArea
}
