package ui

import (
	"image/color"
	"log"

	"fyne.io/fyne/v2"
	"fyne.io/fyne/v2/canvas"
	"fyne.io/fyne/v2/container"
	"fyne.io/fyne/v2/driver/desktop"
	"fyne.io/fyne/v2/layout"
	"fyne.io/fyne/v2/storage"
	"fyne.io/fyne/v2/widget"

	"skinhunter/data"
)

// ChampionGridItem creates a grid item for a champion
func ChampionGridItem(champ data.ChampionSummary, onSelect func(champ data.ChampionSummary)) fyne.CanvasObject {
	imageURL := data.GetChampionSquarePortraitURL(champ)
	log.Printf("Cargando imagen del campeÃ³n desde: %s", imageURL)

	uri, err := storage.ParseURI(imageURL)
	if err != nil {
		log.Printf("Error al parsear URI: %s", imageURL)
		return widget.NewLabel("Error en URI")
	}

	img := canvas.NewImageFromURI(uri)
	img.FillMode = canvas.ImageFillContain
	img.SetMinSize(fyne.NewSize(80, 80))

	nameLabel := widget.NewLabel(champ.Name)
	nameLabel.Alignment = fyne.TextAlignCenter
	nameLabel.TextStyle = fyne.TextStyle{Bold: true}
	nameLabel.Truncation = fyne.TextTruncateEllipsis

	itemContent := container.NewVBox(img, container.NewPadded(nameLabel))
	card := widget.NewCard("", "", itemContent)
	tapButton := widget.NewButton("", func() { onSelect(champ) })
	return container.NewStack(card, tapButton)
}

// SkinItem creates a grid item for a skin
func SkinItem(skin data.Skin, onSelect func(skin data.Skin)) fyne.CanvasObject {
	if skin.IsBase {
		return nil
	}

	itemWidth := float32(190)
	itemHeight := float32(240)
	imgHeight := itemHeight * 0.7

	imgURL := data.GetSkinTileURL(skin)
	log.Printf("Cargando imagen de la skin desde: %s", imgURL)

	uri, err := storage.ParseURI(imgURL)
	if err != nil {
		log.Printf("Error al parsear URI: %s", imgURL)
		return widget.NewLabel("Error en URI")
	}

	imgWidget := canvas.NewImageFromURI(uri)
	imgWidget.FillMode = canvas.ImageFillStretch
	imgWidget.SetMinSize(fyne.NewSize(itemWidth, imgHeight))

	nameLabel := widget.NewLabel(skin.Name)
	nameLabel.Truncation = fyne.TextTruncateEllipsis
	nameLabel.Wrapping = fyne.TextWrapOff

	// Rarity Icon
	var rarityIconWidget fyne.CanvasObject = layout.NewSpacer()
	_, rarityIconURL := data.Rarity(skin)
	if rarityIconURL != "" {
		rarityUri, err := storage.ParseURI(rarityIconURL)
		if err == nil {
			rarityIcon := canvas.NewImageFromURI(rarityUri)
			rarityIcon.SetMinSize(fyne.NewSize(16, 16))
			rarityIconWidget = rarityIcon
		}
	}

	// Bottom Bar
	bottomContent := container.NewBorder(nil, nil, rarityIconWidget, nil, container.NewPadded(nameLabel))
	bgRect := canvas.NewRectangle(color.NRGBA{R: 0x0A, G: 0x0E, B: 0x19, A: 0xD0})
	bottomBar := container.NewStack(bgRect, bottomContent)

	// Top Icons (Legacy, Chroma)
	topIcons := []fyne.CanvasObject{}
	iconSize := fyne.NewSize(20, 20)

	if skin.IsLegacy {
		legacyUri, err := storage.ParseURI(data.LegacyIconURL())
		if err == nil {
			legacyIcon := canvas.NewImageFromURI(legacyUri)
			legacyIcon.SetMinSize(iconSize)
			topIcons = append(topIcons, legacyIcon)
		}
	}
	if len(skin.Chromas) > 0 {
		chromaUri, err := storage.ParseURI(data.ChromaIconURL())
		if err == nil {
			chromaIcon := canvas.NewImageFromURI(chromaUri)
			chromaIcon.SetMinSize(iconSize)
			if len(topIcons) > 0 {
				topIcons = append(topIcons, layout.NewSpacer())
			}
			topIcons = append(topIcons, chromaIcon)
		}
	}
	topIconsHBox := container.NewHBox(layout.NewSpacer())
	topIconsHBox.Add(container.NewHBox(topIcons...))

	// Final Layout
	contentLayout := container.NewBorder(
		container.NewPadded(topIconsHBox),
		bottomBar,
		nil, nil,
		imgWidget,
	)
	card := widget.NewCard("", "", contentLayout)
	tapButton := widget.NewButton("", func() { onSelect(skin) })
	finalItem := container.NewStack(card, tapButton)
	finalItem.Resize(fyne.NewSize(itemWidth, itemHeight))
	return finalItem
}

// Tappable Card Helper
type tappableCard struct {
	widget.BaseWidget
	content  fyne.CanvasObject
	onTapped func()
}

func newTappableCard(content fyne.CanvasObject, onTap func()) *tappableCard {
	c := &tappableCard{content: content, onTapped: onTap}
	c.ExtendBaseWidget(c)
	return c
}

func (c *tappableCard) CreateRenderer() fyne.WidgetRenderer {
	return widget.NewSimpleRenderer(c.content)
}

func (c *tappableCard) Tapped(_ *fyne.PointEvent) {
	if c.onTapped != nil {
		c.onTapped()
	}
}

func (c *tappableCard) Cursor() desktop.Cursor { return desktop.PointerCursor }

// Otros helpers
func newIconButton(iconRes fyne.Resource, onTap func()) *widget.Button {
	return widget.NewButtonWithIcon("", iconRes, onTap)
}

func NewTabButton(label string, icon fyne.Resource, tapped func()) fyne.CanvasObject {
	btnIcon := canvas.NewImageFromResource(icon)
	btnIcon.SetMinSize(fyne.NewSize(24, 24))
	btnIcon.FillMode = canvas.ImageFillContain
	btnLabel := widget.NewLabel(label)
	btnLabel.Alignment = fyne.TextAlignCenter
	content := container.NewVBox(btnIcon, btnLabel)
	cardContent := container.NewPadded(content)
	return newTappableCard(cardContent, tapped)
}
